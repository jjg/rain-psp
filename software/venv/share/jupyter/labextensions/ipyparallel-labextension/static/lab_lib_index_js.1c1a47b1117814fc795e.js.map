{"version":3,"file":"lab_lib_index_js.1c1a47b1117814fc795e.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAuG;AAC/C;AACA;AACX;AACS;AACR;AACN;AACD;AACI;AACW;AACV;AACb;AACO;AACE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,6BAA6B,mDAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qDAAM;AAC/C;AACA;AACA;AACA,+BAA+B,+EAA6B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0CAA0C,wDAAW;AACrD,mCAAmC,mDAAM;AACzC;AACA;AACA,4BAA4B,yDAAO;AACnC;AACA,iCAAiC,mDAAM;AACvC;AACA;AACA;AACA;AACA,uCAAuC,+DAAa;AACpD,kBAAkB,kEAAW;AAC7B;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,wBAAwB,6DAAqB,MAAM,sEAAoB;AACvE;AACA,gBAAgB,6DAAqB;AACrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,yBAAyB,iDAAI;AAC7B;AACA;AACA,aAAa;AACb,yBAAyB,2DAA2D;AACpF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,0DAAgB,GAAG;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,GAAG;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,GAAG;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,GAAG;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAe,CAAC,iDAAmB,mBAAmB;AAC9D;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa,oGAAoG;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kHAAkH,SAAS;AAC3H;AACA;AACA,yBAAyB,kDAAI;AAC7B,0BAA0B,uDAAQ;AAClC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,6DAAqB;AACjE;AACA,+BAA+B,8EAA4B,IAAI,6BAA6B,EAAE,eAAe,KAAK,sDAAsD;AACxK;AACA;AACA,iBAAiB,sEAAgB;AACjC;AACA,gDAAgD,6DAAqB;AACrE;AACA;AACA;AACA;AACA;AACA,4CAA4C,6DAAqB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8EAA4B,IAAI,6BAA6B,EAAE,eAAe,KAAK;AAClH;AACA;AACA;AACA;AACA,qBAAqB,sEAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8EAA4B,IAAI,6BAA6B,EAAE,eAAe,GAAG,GAAG,KAAK,gBAAgB;AACxI;AACA;AACA,iBAAiB,sEAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8EAA4B,IAAI,6BAA6B,EAAE,eAAe,GAAG,GAAG,KAAK,kBAAkB;AAC1I;AACA;AACA,iBAAiB,sEAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,IAAI;AACtD;AACA;AACA;AACA,aAAa,sEAAgB;AAC7B;AACA;AACA,YAAY,gEAAiB;AAC7B;AACA;AACA;AACA,+BAA+B,8EAA4B,IAAI,6BAA6B,EAAE,eAAe,GAAG,GAAG;AACnH;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,sEAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sEAAuB;AACtC,mBAAmB,gEAAkB;AACrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iDAAmB,uBAAuB,oUAAoU;AAC9X,KAAK;AACL;AACA,YAAY,iDAAmB;AAC/B,QAAQ,iDAAmB,SAAS,sCAAsC;AAC1E;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAqE;AACjF;AACA,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iDAAmB,SAAS;AACxC;AACA;AACA,WAAW;AACX,QAAQ,iDAAmB,UAAU,2CAA2C;AAChF,QAAQ,iDAAmB,UAAU,2CAA2C;AAChF;AACA;AACA,QAAQ,iDAAmB,UAAU,2CAA2C;AAChF;AACA;AACA,QAAQ,iDAAmB,UAAU,kDAAkD;AACvF,YAAY,iDAAmB,aAAa;AAC5C;AACA;AACA,iBAAiB,mCAAmC,WAAW,GAAG;AAClE,YAAY,iDAAmB,aAAa,uFAAuF,+CAA+C;AAClL;AACA;AACA,iBAAiB,kBAAkB,WAAW,GAAG;AACjD,YAAY,iDAAmB,aAAa;AAC5C;AACA;AACA,iBAAiB,oBAAoB,WAAW,GAAG;AACnD,YAAY,iDAAmB,aAAa,sFAAsF;AAClI;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B;;;;;;;;;;;;;;;;AC1hBpB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;;;;;;;;;;;;;;;;;;;;;AC1ByB;AAC3B;AAC/B;AACA;AACA;AACA;AACO,yBAAyB,4CAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,uBAAuB,+CAA+C;AACvH,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,uBAAuB,6BAA6B;AACrG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,uBAAuB,gCAAgC;AACxG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB;AACnC,YAAY,gDAAmB,UAAU,gCAAgC;AACzE,gBAAgB,gDAAmB,UAAU,qCAAqC;AAClF,oBAAoB,gDAAmB,WAAW,sCAAsC;AACxF,oBAAoB,gDAAmB,YAAY;AACnD;AACA,2BAA2B;AAC3B,gBAAgB,gDAAmB,UAAU,qCAAqC;AAClF,oBAAoB,gDAAmB,WAAW,sCAAsC;AACxF,oBAAoB,gDAAmB,YAAY;AACnD;AACA,2BAA2B;AAC3B,gBAAgB,gDAAmB,UAAU,qCAAqC;AAClF,oBAAoB,gDAAmB,WAAW,sCAAsC;AACxF,oBAAoB,gDAAmB,YAAY;AACnD;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,uCAAuC;AACvC;AACA;AACA;AACA,WAAW,gEAAU;AACrB;AACA,cAAc,gDAAmB,eAAe,oDAAoD;AACpG,kBAAkB,qEAAmB,IAAI,iEAAe,GAAG,iBAAiB;AAC5E,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpGA;AACA;AACsE;AACd;AACF;AACL;AACc;AAChB;AAC2B;AACtB;AACT;AACP;AACR;AACe;AACH;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAe;AACvB,QAAQ,gEAAe;AACvB,QAAQ,8DAAS;AACjB,QAAQ,oEAAe;AACvB,QAAQ,2DAAS;AACjB,QAAQ,kEAAgB;AACxB,QAAQ,yEAAgB;AACxB,QAAQ,yDAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6CAAO;AAC/B;AACA;AACA;AACA,KAAK;AACL;AACA,6BAA6B,8DAAO;AACpC;AACA,gBAAgB,qDAAU;AAC1B,KAAK;AACL;AACA;AACA,oCAAoC,WAAW;AAC/C;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAgB;AACxB,QAAQ,+DAAgB;AACxB,QAAQ,+DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,4BAA4B,mEAA2B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,4BAA4B,6DAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,4BAA4B,+DAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,4BAA4B,8DAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,4BAA4B,+DAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU,GAAG,KAAK,IAAI,eAAe;AACvE;AACA,cAAc;AACd,UAAU;AACV,QAAQ;AACR;AACA;AACA,WAAW,2CAA2C;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC,YAAY;AACZ;AACA;AACA;AACA;AACA,iBAAiB,mEAA2B;AAC5C;AACA;AACA,KAAK;AACL;AACA,iBAAiB,8DAAsB;AACvC;AACA;AACA,KAAK;AACL;AACA,iBAAiB,+DAAuB;AACxC;AACA;AACA,KAAK;AACL;AACA,iBAAiB,+DAAuB;AACxC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6EAA2B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6EAA2B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B;;;;;;;;;;;;;;;;;;;ACpZ2B;AACV;AAC5C;AACA;AACA;AACO,sBAAsB,mDAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,wDAAW;AACnD;AACA;AACA;AACA,6BAA6B,qDAAc;AAC3C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AACyH;AAC7B;AACO;AACtC;AACD;AAC5D,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F,yCAAyC,sFAA+B,CAAC,wDAA6B;AACtG,yCAAyC,sFAA+B,CAAC,uDAA6B;AACtG;AACA,iDAAiD,qCAAqC,GAAG,8EAA8E,wCAAwC,oCAAoC,uCAAuC,mBAAmB,GAAG,+EAA+E,yDAAyD,GAAG,qCAAqC,wBAAwB,GAAG,+DAA+D,mBAAmB,qBAAqB,8BAA8B,wBAAw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","sources":["webpack://ipyparallel-labextension/./lab/lib/clusters.js","webpack://ipyparallel-labextension/./lab/lib/commands.js","webpack://ipyparallel-labextension/./lab/lib/dialog.js","webpack://ipyparallel-labextension/./lab/lib/index.js","webpack://ipyparallel-labextension/./lab/lib/sidebar.js","webpack://ipyparallel-labextension/./lab/style/index.css","webpack://ipyparallel-labextension/./lab/style/logo.svg","webpack://ipyparallel-labextension/./lab/style/index.css?913a","webpack://ipyparallel-labextension/./lab/style/code-dark.svg","webpack://ipyparallel-labextension/./lab/style/code-light.svg"],"sourcesContent":["import { showErrorMessage, Toolbar, ToolbarButton, CommandToolbarButton, } from \"@jupyterlab/apputils\";\nimport { ServerConnection } from \"@jupyterlab/services\";\nimport { refreshIcon } from \"@jupyterlab/ui-components\";\nimport { ArrayExt } from \"@lumino/algorithm\";\nimport { JSONExt, MimeData } from \"@lumino/coreutils\";\nimport { ElementExt } from \"@lumino/domutils\";\nimport { Drag } from \"@lumino/dragdrop\";\nimport { Poll } from \"@lumino/polling\";\nimport { Signal } from \"@lumino/signaling\";\nimport { Widget, PanelLayout } from \"@lumino/widgets\";\nimport { newClusterDialog } from \"./dialog\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { CommandIDs } from \"./commands\";\n/**\n * A refresh interval (in ms) for polling the backend cluster manager.\n */\nconst REFRESH_INTERVAL = 5000;\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * The mimetype used for Jupyter cell data.\n */\nconst JUPYTER_CELL_MIME = \"application/vnd.jupyter.cells\";\nconst CLUSTER_PREFIX = \"ipyparallel/clusters\";\n/**\n * A widget for IPython cluster management.\n */\nexport class ClusterManager extends Widget {\n    /**\n     * Create a new cluster manager.\n     */\n    constructor(options) {\n        super();\n        this._dragData = null;\n        this._clusters = [];\n        this._activeClusterChanged = new Signal(this);\n        this._serverErrorShown = false;\n        this._isReady = true;\n        this.addClass(\"ipp-ClusterManager\");\n        this._serverSettings = ServerConnection.makeSettings();\n        this._injectClientCodeForCluster = options.injectClientCodeForCluster;\n        this._getClientCodeForCluster = options.getClientCodeForCluster;\n        this._registry = options.registry;\n        // A function to set the active cluster.\n        this._setActiveById = (id) => {\n            const cluster = this._clusters.find((c) => c.id === id);\n            if (!cluster) {\n                return;\n            }\n            const old = this._activeCluster;\n            if (old && old.id === cluster.id) {\n                return;\n            }\n            this._activeCluster = cluster;\n            this._activeClusterChanged.emit({\n                name: \"cluster\",\n                oldValue: old,\n                newValue: cluster,\n            });\n            this.update();\n        };\n        const layout = (this.layout = new PanelLayout());\n        this._clusterListing = new Widget();\n        this._clusterListing.addClass(\"ipp-ClusterListing\");\n        // Create the toolbar.\n        const toolbar = new Toolbar();\n        // Make a label widget for the toolbar.\n        const toolbarLabel = new Widget();\n        toolbarLabel.node.textContent = \"CLUSTERS\";\n        toolbarLabel.addClass(\"ipp-ClusterManager-label\");\n        toolbar.addItem(\"label\", toolbarLabel);\n        // Make a refresh button for the toolbar.\n        toolbar.addItem(\"refresh\", new ToolbarButton({\n            icon: refreshIcon,\n            onClick: async () => {\n                return this._updateClusterList();\n            },\n            tooltip: \"Refresh Cluster List\",\n        }));\n        // Make a new cluster button for the toolbar.\n        toolbar.addItem(CommandIDs.newCluster, new CommandToolbarButton({\n            commands: this._registry,\n            id: CommandIDs.newCluster,\n        }));\n        layout.addWidget(toolbar);\n        layout.addWidget(this._clusterListing);\n        // Do an initial refresh of the cluster list.\n        void this._updateClusterList();\n        // Also refresh periodically.\n        this._poll = new Poll({\n            factory: async () => {\n                await this._updateClusterList();\n            },\n            frequency: { interval: REFRESH_INTERVAL, backoff: true, max: 60 * 1000 },\n            standby: \"when-hidden\",\n        });\n    }\n    /**\n     * The currently selected cluster, or undefined if there is none.\n     */\n    get activeCluster() {\n        return this._activeCluster;\n    }\n    /**\n     * Set an active cluster by id.\n     */\n    setActiveCluster(id) {\n        this._setActiveById(id);\n    }\n    /**\n     * A signal that is emitted when an active cluster changes.\n     */\n    get activeClusterChanged() {\n        return this._activeClusterChanged;\n    }\n    /**\n     * Whether the cluster manager is ready to launch a cluster\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * Get the current clusters known to the manager.\n     */\n    get clusters() {\n        return this._clusters;\n    }\n    /**\n     * Refresh the current list of clusters.\n     */\n    async refresh() {\n        await this._updateClusterList();\n    }\n    /**\n     * Create a new cluster.\n     */\n    async create() {\n        const clusterRequest = await newClusterDialog({});\n        if (!clusterRequest) {\n            return;\n        }\n        const cluster = await this._newCluster(clusterRequest);\n        return cluster;\n    }\n    /**\n     * Start a cluster by ID.\n     */\n    async start(id) {\n        const cluster = this._clusters.find((c) => c.id === id);\n        if (!cluster) {\n            throw Error(`Cannot find cluster ${id}`);\n        }\n        await this._startById(id);\n    }\n    /**\n     * Stop a cluster by ID.\n     */\n    async stop(id) {\n        const cluster = this._clusters.find((c) => c.id === id);\n        if (!cluster) {\n            throw Error(`Cannot find cluster ${id}`);\n        }\n        await this._stopById(id);\n    }\n    /**\n     * Scale a cluster by ID.\n     */\n    async scale(id) {\n        const cluster = this._clusters.find((c) => c.id === id);\n        if (!cluster) {\n            throw Error(`Cannot find cluster ${id}`);\n        }\n        const newCluster = await this._scaleById(id);\n        return newCluster;\n    }\n    /**\n     * Dispose of the cluster manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._poll.dispose();\n        super.dispose();\n    }\n    /**\n     * Handle an update request.\n     */\n    onUpdateRequest(msg) {\n        // Don't bother if the sidebar is not visible\n        if (!this.isVisible) {\n            return;\n        }\n        ReactDOM.render(React.createElement(ClusterListing, { clusters: this._clusters, activeClusterId: (this._activeCluster && this._activeCluster.id) || \"\", scaleById: (id) => {\n                return this._scaleById(id);\n            }, startById: (id) => {\n                return this._startById(id);\n            }, stopById: (id) => {\n                return this._stopById(id);\n            }, setActiveById: this._setActiveById, injectClientCodeForCluster: this._injectClientCodeForCluster }), this._clusterListing.node);\n    }\n    /**\n     * Rerender after showing.\n     */\n    onAfterShow(msg) {\n        this.update();\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        let node = this._clusterListing.node;\n        node.addEventListener(\"p-dragenter\", this);\n        node.addEventListener(\"p-dragleave\", this);\n        node.addEventListener(\"p-dragover\", this);\n        node.addEventListener(\"mousedown\", this);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        let node = this._clusterListing.node;\n        node.removeEventListener(\"p-dragenter\", this);\n        node.removeEventListener(\"p-dragleave\", this);\n        node.removeEventListener(\"p-dragover\", this);\n        node.removeEventListener(\"mousedown\", this);\n        document.removeEventListener(\"mouseup\", this, true);\n        document.removeEventListener(\"mousemove\", this, true);\n    }\n    /**\n     * Handle the DOM events for the directory listing.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the panel's DOM node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case \"mousedown\":\n                this._evtMouseDown(event);\n                break;\n            case \"mouseup\":\n                this._evtMouseUp(event);\n                break;\n            case \"mousemove\":\n                this._evtMouseMove(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `mousedown` events for the widget.\n     */\n    _evtMouseDown(event) {\n        const { button, shiftKey } = event;\n        // We only handle main or secondary button actions.\n        if (!(button === 0 || button === 2)) {\n            return;\n        }\n        // Shift right-click gives the browser default behavior.\n        if (shiftKey && button === 2) {\n            return;\n        }\n        // Find the target cluster.\n        const clusterIndex = this._findCluster(event);\n        if (clusterIndex === -1) {\n            return;\n        }\n        // Prepare for a drag start\n        this._dragData = {\n            pressX: event.clientX,\n            pressY: event.clientY,\n            index: clusterIndex,\n        };\n        // Enter possible drag mode\n        document.addEventListener(\"mouseup\", this, true);\n        document.addEventListener(\"mousemove\", this, true);\n        event.preventDefault();\n    }\n    /**\n     * Handle the `'mouseup'` event on the document.\n     */\n    _evtMouseUp(event) {\n        // Remove the event listeners we put on the document\n        if (event.button !== 0 || !this._drag) {\n            document.removeEventListener(\"mousemove\", this, true);\n            document.removeEventListener(\"mouseup\", this, true);\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handle the `'mousemove'` event for the widget.\n     */\n    _evtMouseMove(event) {\n        let data = this._dragData;\n        if (!data) {\n            return;\n        }\n        // Check for a drag initialization.\n        let dx = Math.abs(event.clientX - data.pressX);\n        let dy = Math.abs(event.clientY - data.pressY);\n        if (dx >= DRAG_THRESHOLD || dy >= DRAG_THRESHOLD) {\n            event.preventDefault();\n            event.stopPropagation();\n            void this._startDrag(data.index, event.clientX, event.clientY);\n        }\n    }\n    /**\n     * Start a drag event.\n     */\n    async _startDrag(index, clientX, clientY) {\n        // Create the drag image.\n        const model = this._clusters[index];\n        const listingItem = this._clusterListing.node.querySelector(`li.ipp-ClusterListingItem[data-cluster-id=\"${model.id}\"]`);\n        const dragImage = Private.createDragImage(listingItem);\n        // Set up the drag event.\n        this._drag = new Drag({\n            mimeData: new MimeData(),\n            dragImage,\n            supportedActions: \"copy\",\n            proposedAction: \"copy\",\n            source: this,\n        });\n        // Add mimeData for plain text so that normal editors can\n        // receive the data.\n        const textData = this._getClientCodeForCluster(model);\n        this._drag.mimeData.setData(\"text/plain\", textData);\n        // Add cell data for notebook drops.\n        const cellData = [\n            {\n                cell_type: \"code\",\n                source: textData,\n                outputs: [],\n                execution_count: null,\n                metadata: {},\n            },\n        ];\n        this._drag.mimeData.setData(JUPYTER_CELL_MIME, cellData);\n        // Remove mousemove and mouseup listeners and start the drag.\n        document.removeEventListener(\"mousemove\", this, true);\n        document.removeEventListener(\"mouseup\", this, true);\n        return this._drag.start(clientX, clientY).then((action) => {\n            if (this.isDisposed) {\n                return;\n            }\n            this._drag = null;\n            this._dragData = null;\n        });\n    }\n    /**\n     * Launch a new cluster on the server.\n     */\n    async _newCluster(clusterRequest) {\n        this._isReady = false;\n        this._registry.notifyCommandChanged(CommandIDs.newCluster);\n        // TODO: allow requesting a profile, options\n        const response = await ServerConnection.makeRequest(`${this._serverSettings.baseUrl}${CLUSTER_PREFIX}`, { method: \"POST\", body: JSON.stringify(clusterRequest) }, this._serverSettings);\n        if (response.status !== 200) {\n            const err = await response.json();\n            void showErrorMessage(\"Cluster Create Error\", err);\n            this._isReady = true;\n            this._registry.notifyCommandChanged(CommandIDs.newCluster);\n            throw err;\n        }\n        const model = (await response.json());\n        await this._updateClusterList();\n        this._isReady = true;\n        this._registry.notifyCommandChanged(CommandIDs.newCluster);\n        return model;\n    }\n    /**\n     * Refresh the list of clusters on the server.\n     */\n    async _updateClusterList() {\n        const response = await ServerConnection.makeRequest(`${this._serverSettings.baseUrl}${CLUSTER_PREFIX}`, {}, this._serverSettings);\n        if (response.status !== 200) {\n            const msg = \"Failed to list clusters: might the server extension not be installed/enabled?\";\n            const err = new Error(msg);\n            if (!this._serverErrorShown) {\n                void showErrorMessage(\"IPP Extension Server Error\", err);\n                this._serverErrorShown = true;\n            }\n            throw err;\n        }\n        const data = (await response.json());\n        this._clusters = data;\n        // Check to see if the active cluster still exits.\n        // If it doesn't, or if there is no active cluster,\n        // select the first one.\n        const active = this._clusters.find((c) => c.id === (this._activeCluster && this._activeCluster.id));\n        if (!active) {\n            const id = (this._clusters[0] && this._clusters[0].id) || \"\";\n            this._setActiveById(id);\n        }\n        this.update();\n    }\n    /**\n     * Start a cluster by its id.\n     */\n    async _startById(id) {\n        const response = await ServerConnection.makeRequest(`${this._serverSettings.baseUrl}${CLUSTER_PREFIX}/${id}`, { method: \"POST\" }, this._serverSettings);\n        if (response.status > 299) {\n            const err = await response.json();\n            void showErrorMessage(\"Failed to start cluster\", err);\n            throw err;\n        }\n        await this._updateClusterList();\n    }\n    /**\n     * Stop a cluster by its id.\n     */\n    async _stopById(id) {\n        const response = await ServerConnection.makeRequest(`${this._serverSettings.baseUrl}${CLUSTER_PREFIX}/${id}`, { method: \"DELETE\" }, this._serverSettings);\n        if (response.status !== 204) {\n            const err = await response.json();\n            void showErrorMessage(\"Failed to close cluster\", err);\n            throw err;\n        }\n        await this._updateClusterList();\n    }\n    /**\n     * Scale a cluster by its id.\n     */\n    async _scaleById(id) {\n        const cluster = this._clusters.find((c) => c.id === id);\n        if (!cluster) {\n            throw Error(`Failed to find cluster ${id} to scale`);\n        }\n        // TODO: scale not implemented\n        // should add an engine set\n        void showErrorMessage(\"Scale not implemented\", \"\");\n        // const update = await showScalingDialog(cluster);\n        const update = cluster;\n        if (JSONExt.deepEqual(update, cluster)) {\n            // If the user canceled, or the model is identical don't try to update.\n            return Promise.resolve(cluster);\n        }\n        const response = await ServerConnection.makeRequest(`${this._serverSettings.baseUrl}${CLUSTER_PREFIX}/${id}`, {\n            method: \"PATCH\",\n            body: JSON.stringify(update),\n        }, this._serverSettings);\n        if (response.status !== 200) {\n            const err = await response.json();\n            void showErrorMessage(\"Failed to scale cluster\", err);\n            throw err;\n        }\n        const model = (await response.json());\n        await this._updateClusterList();\n        return model;\n    }\n    _findCluster(event) {\n        const nodes = Array.from(this.node.querySelectorAll(\"li.ipp-ClusterListingItem\"));\n        return ArrayExt.findFirstIndex(nodes, (node) => {\n            return ElementExt.hitTest(node, event.clientX, event.clientY);\n        });\n    }\n}\n/**\n * A React component for a launcher button listing.\n */\nfunction ClusterListing(props) {\n    let listing = props.clusters.map((cluster) => {\n        return (React.createElement(ClusterListingItem, { isActive: cluster.id === props.activeClusterId, key: cluster.id, cluster: cluster, scale: () => props.scaleById(cluster.id), start: () => props.startById(cluster.id), stop: () => props.stopById(cluster.id), setActive: () => props.setActiveById(cluster.id), injectClientCode: () => props.injectClientCodeForCluster(cluster) }));\n    });\n    // Return the JSX component.\n    return (React.createElement(\"div\", null,\n        React.createElement(\"ul\", { className: \"ipp-ClusterListing-list\" }, listing)));\n}\n/**\n * A TSX functional component for rendering a single running cluster.\n */\nfunction ClusterListingItem(props) {\n    const { cluster, isActive, setActive, scale, start, stop, injectClientCode } = props;\n    let itemClass = \"ipp-ClusterListingItem\";\n    itemClass = isActive ? `${itemClass} jp-mod-active` : itemClass;\n    let cluster_state = \"Stopped\";\n    if (cluster.controller) {\n        cluster_state = cluster.controller.state.state;\n        if (cluster_state == \"after\") {\n            cluster_state = \"Stopped\";\n        }\n    }\n    // stop action is 'delete' for already-stopped clusters\n    let STOP = cluster_state === \"Stopped\" ? \"DELETE\" : \"STOP\";\n    return (React.createElement(\"li\", { className: itemClass, \"data-cluster-id\": cluster.id, onClick: (evt) => {\n            setActive();\n            evt.stopPropagation();\n        } },\n        React.createElement(\"div\", { className: \"ipp-ClusterListingItem-title\" }, cluster.id),\n        React.createElement(\"div\", { className: \"ipp-ClusterListingItem-stats\" },\n            \"State: \",\n            cluster_state),\n        React.createElement(\"div\", { className: \"ipp-ClusterListingItem-stats\" },\n            \"Number of engines: \",\n            cluster.engines.n || cluster.cluster.n || \"auto\"),\n        React.createElement(\"div\", { className: \"ipp-ClusterListingItem-button-panel\" },\n            React.createElement(\"button\", { className: \"ipp-ClusterListingItem-button ipp-ClusterListingItem-code ipp-CodeIcon jp-mod-styled\", onClick: (evt) => {\n                    injectClientCode();\n                    evt.stopPropagation();\n                }, title: `Inject client code for ${cluster.id}` }),\n            React.createElement(\"button\", { className: `ipp-ClusterListingItem-button ipp-ClusterListingItem-start jp-mod-styled ${cluster_state == \"Stopped\" ? \"\" : \"ipp-hidden\"}`, onClick: async (evt) => {\n                    evt.stopPropagation();\n                    return start();\n                }, title: `Start ${cluster.id}` }, \"START\"),\n            React.createElement(\"button\", { className: \"ipp-ClusterListingItem-button ipp-ClusterListingItem-scale jp-mod-styled ipp-hidden\", onClick: async (evt) => {\n                    evt.stopPropagation();\n                    return scale();\n                }, title: `Rescale ${cluster.id}` }, \"SCALE\"),\n            React.createElement(\"button\", { className: `ipp-ClusterListingItem-button ipp-ClusterListingItem-stop jp-mod-styled ${cluster_state === \"Stopped\" && cluster.cluster.cluster_id === \"\"\n                    ? \"ipp-hidden\"\n                    : \"\"}`, onClick: async (evt) => {\n                    evt.stopPropagation();\n                    return stop();\n                }, title: STOP }, STOP))));\n}\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create a drag image for an HTML node.\n     */\n    function createDragImage(node) {\n        const image = node.cloneNode(true);\n        image.classList.add(\"ipp-ClusterListingItem-drag\");\n        return image;\n    }\n    Private.createDragImage = createDragImage;\n})(Private || (Private = {}));\n","export var CommandIDs;\n(function (CommandIDs) {\n    /**\n     * Inject client code into the active editor.\n     */\n    CommandIDs.injectClientCode = \"ipyparallel:inject-client-code\";\n    /**\n     * Launch a new cluster.\n     */\n    CommandIDs.newCluster = \"ipyparallel:new-cluster\";\n    /**\n     * Launch a new cluster.\n     */\n    CommandIDs.startCluster = \"ipyparallel:start-cluster\";\n    /**\n     * Shutdown a cluster.\n     */\n    CommandIDs.stopCluster = \"ipyparallel:stop-cluster\";\n    /**\n     * Scale a cluster.\n     */\n    CommandIDs.scaleCluster = \"ipyparallel:scale-cluster\";\n    /**\n     * Toggle the auto-starting of clients.\n     */\n    CommandIDs.toggleAutoStartClient = \"ipyparallel:toggle-auto-start-client\";\n})(CommandIDs || (CommandIDs = {}));\n","import { Dialog, showDialog } from \"@jupyterlab/apputils\";\nimport * as React from \"react\";\n/**\n * A component for an HTML form that allows the user\n * to select Dialog parameters.\n */\nexport class NewCluster extends React.Component {\n    /**\n     * Construct a new NewCluster component.\n     */\n    constructor(props) {\n        super(props);\n        let model;\n        model = props.initialModel;\n        this.state = { model };\n    }\n    /**\n     * When the component updates we take the opportunity to write\n     * the state of the cluster to an external object so this can\n     * be sent as the result of the dialog.\n     */\n    componentDidUpdate() {\n        let model = Object.assign({}, this.state.model);\n        this.props.stateEscapeHatch(model);\n    }\n    /**\n     * React to the number of workers changing.\n     */\n    onScaleChanged(event) {\n        this.setState({\n            model: Object.assign(Object.assign({}, this.state.model), { n: parseInt(event.target.value || null, null) }),\n        });\n    }\n    /**\n     * React to the number of workers changing.\n     */\n    onProfileChanged(event) {\n        this.setState({\n            model: Object.assign(Object.assign({}, this.state.model), { profile: event.target.value }),\n        });\n    }\n    /**\n     * React to the number of workers changing.\n     */\n    onClusterIdChanged(event) {\n        this.setState({\n            model: Object.assign(Object.assign({}, this.state.model), { cluster_id: event.target.value }),\n        });\n    }\n    /**\n     * Render the component..\n     */\n    render() {\n        const model = this.state.model;\n        // const disabledClass = \"ipp-mod-disabled\";\n        return (React.createElement(\"div\", null,\n            React.createElement(\"div\", { className: \"ipp-DialogSection\" },\n                React.createElement(\"div\", { className: \"ipp-DialogSection-item\" },\n                    React.createElement(\"span\", { className: `ipp-DialogSection-label` }, \"Profile\"),\n                    React.createElement(\"input\", { className: \"ipp-DialogInput\", value: model.profile, type: \"string\", placeholder: \"default\", onChange: (evt) => {\n                            this.onProfileChanged(evt);\n                        } })),\n                React.createElement(\"div\", { className: \"ipp-DialogSection-item\" },\n                    React.createElement(\"span\", { className: `ipp-DialogSection-label` }, \"Cluster ID\"),\n                    React.createElement(\"input\", { className: \"ipp-DialogInput\", value: model.cluster_id, type: \"string\", placeholder: \"auto\", onChange: (evt) => {\n                            this.onClusterIdChanged(evt);\n                        } })),\n                React.createElement(\"div\", { className: \"ipp-DialogSection-item\" },\n                    React.createElement(\"span\", { className: `ipp-DialogSection-label` }, \"Engines\"),\n                    React.createElement(\"input\", { className: \"ipp-DialogInput\", value: model.n, type: \"number\", step: \"1\", placeholder: \"auto\", onChange: (evt) => {\n                            this.onScaleChanged(evt);\n                        } })))));\n    }\n}\n/**\n * Show a dialog for Dialog a cluster model.\n *\n * @param model: the initial model.\n *\n * @returns a promse that resolves with the user-selected Dialogs for the\n *   cluster model. If they pressed the cancel button, it resolves with\n *   the original model.\n */\nexport function newClusterDialog(model) {\n    let updatedModel = Object.assign({}, model);\n    const escapeHatch = (update) => {\n        updatedModel = update;\n    };\n    return showDialog({\n        title: `New Cluster`,\n        body: React.createElement(NewCluster, { initialModel: model, stateEscapeHatch: escapeHatch }),\n        buttons: [Dialog.cancelButton(), Dialog.okButton({ label: \"CREATE\" })],\n    }).then((result) => {\n        if (result.button.accept) {\n            return updatedModel;\n        }\n        else {\n            return null;\n        }\n    });\n}\n","// IPython Parallel Lab extension derived from dask-labextension@f6141455d770ed7de564fc4aa403b9964cd4e617\n// License: BSD-3-Clause\nimport { ILabShell, ILayoutRestorer, } from \"@jupyterlab/application\";\nimport { ICommandPalette, } from \"@jupyterlab/apputils\";\nimport { IConsoleTracker } from \"@jupyterlab/console\";\nimport { IMainMenu } from \"@jupyterlab/mainmenu\";\nimport { ISettingRegistry } from \"@jupyterlab/settingregistry\";\nimport { IStateDB } from \"@jupyterlab/statedb\";\nimport { INotebookTracker, NotebookActions, } from \"@jupyterlab/notebook\";\nimport { LabIcon } from \"@jupyterlab/ui-components\";\nimport { Signal } from \"@lumino/signaling\";\nimport { Sidebar } from \"./sidebar\";\nimport \"../style/index.css\";\nimport logoSvgStr from \"../style/logo.svg\";\nimport { CommandIDs } from \"./commands\";\nconst PLUGIN_ID = \"ipyparallel-labextension:plugin\";\n/**\n * The IPython Parallel extension.\n */\nconst plugin = {\n    activate,\n    id: PLUGIN_ID,\n    requires: [\n        ICommandPalette,\n        IConsoleTracker,\n        ILabShell,\n        ILayoutRestorer,\n        IMainMenu,\n        INotebookTracker,\n        ISettingRegistry,\n        IStateDB,\n    ],\n    autoStart: true,\n};\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n/**\n * Activate the cluster launcher plugin.\n */\nasync function activate(app, commandPalette, consoleTracker, labShell, restorer, mainMenu, notebookTracker, settingRegistry, state) {\n    const id = \"ipp-cluster-launcher\";\n    const clientCodeInjector = (model) => {\n        const editor = Private.getCurrentEditor(app, notebookTracker, consoleTracker);\n        if (!editor) {\n            return;\n        }\n        Private.injectClientCode(model, editor);\n    };\n    // Create the sidebar panel.\n    const sidebar = new Sidebar({\n        clientCodeInjector,\n        clientCodeGetter: Private.getClientCode,\n        registry: app.commands,\n    });\n    sidebar.id = id;\n    sidebar.title.icon = new LabIcon({\n        name: \"ipyparallel:logo\",\n        svgstr: logoSvgStr,\n    });\n    // sidebar.title.iconClass = 'ipp-Logo jp-SideBar-tabIcon';\n    sidebar.title.caption = \"IPython Parallel\";\n    labShell.add(sidebar, \"left\", { rank: 200 });\n    sidebar.clusterManager.activeClusterChanged.connect(async () => {\n        const active = sidebar.clusterManager.activeCluster;\n        return state.save(id, {\n            cluster: active ? active.id : \"\",\n        });\n    });\n    // A function to create a new client for a session.\n    const createClientForSession = async (session) => {\n        if (!session) {\n            return;\n        }\n        const cluster = sidebar.clusterManager.activeCluster;\n        if (!cluster || !(await Private.shouldUseKernel(session.kernel))) {\n            return;\n        }\n        return Private.createClientForKernel(cluster, session.kernel);\n    };\n    // An array of the trackers to check for active sessions.\n    const trackers = [\n        notebookTracker,\n        consoleTracker,\n    ];\n    // A function to recreate a client on reconnect.\n    const injectOnSessionStatusChanged = async (sessionContext) => {\n        if (sessionContext.session &&\n            sessionContext.session.kernel &&\n            sessionContext.session.kernel.status === \"restarting\") {\n            return createClientForSession(sessionContext.session);\n        }\n    };\n    // A function to inject a client when a new session owner is added.\n    const injectOnWidgetAdded = (_, widget) => {\n        widget.sessionContext.statusChanged.connect(injectOnSessionStatusChanged);\n    };\n    // A function to inject a client when the active cluster changes.\n    const injectOnClusterChanged = () => {\n        trackers.forEach((tracker) => {\n            tracker.forEach(async (widget) => {\n                const session = widget.sessionContext.session;\n                if (session && (await Private.shouldUseKernel(session.kernel))) {\n                    return createClientForSession(session);\n                }\n            });\n        });\n    };\n    // Whether the cluster clients should aggressively inject themselves\n    // into the current session.\n    let autoStartClient = false;\n    // Update the existing trackers and signals in light of a change to the\n    // settings system. In particular, this reacts to a change in the setting\n    // for auto-starting cluster client.\n    const updateTrackers = () => {\n        // Clear any existing signals related to the auto-starting.\n        Signal.clearData(injectOnWidgetAdded);\n        Signal.clearData(injectOnSessionStatusChanged);\n        Signal.clearData(injectOnClusterChanged);\n        if (autoStartClient) {\n            // When a new console or notebook is created, inject\n            // a new client into it.\n            trackers.forEach((tracker) => {\n                tracker.widgetAdded.connect(injectOnWidgetAdded);\n            });\n            // When the status of an existing notebook changes, reinject the client.\n            trackers.forEach((tracker) => {\n                tracker.forEach(async (widget) => {\n                    await createClientForSession(widget.sessionContext.session);\n                    widget.sessionContext.statusChanged.connect(injectOnSessionStatusChanged);\n                });\n            });\n            // When the active cluster changes, reinject the client.\n            sidebar.clusterManager.activeClusterChanged.connect(injectOnClusterChanged);\n        }\n    };\n    // Fetch the initial state of the settings.\n    void Promise.all([settingRegistry.load(PLUGIN_ID), state.fetch(id)]).then(async (res) => {\n        const settings = res[0];\n        if (!settings) {\n            console.warn(\"Unable to retrieve ipp-labextension settings\");\n            return;\n        }\n        const state = res[1];\n        const cluster = state ? state.cluster : \"\";\n        const onSettingsChanged = () => {\n            // Determine whether to use the auto-starting client.\n            // autoStartClient = settings.get(\"autoStartClient\").composite as boolean;\n            updateTrackers();\n        };\n        onSettingsChanged();\n        // React to a change in the settings.\n        settings.changed.connect(onSettingsChanged);\n        // If an active cluster is in the state, reset it.\n        if (cluster) {\n            await sidebar.clusterManager.refresh();\n            sidebar.clusterManager.setActiveCluster(cluster);\n        }\n    });\n    // Add a command to inject client connection code for a given cluster model.\n    // This looks for a cluster model in the application context menu,\n    // and looks for an editor among the currently active notebooks and consoles.\n    // If either is not found, it bails.\n    app.commands.addCommand(CommandIDs.injectClientCode, {\n        label: \"Inject IPython Client Connection Code\",\n        execute: () => {\n            const cluster = Private.clusterFromClick(app, sidebar.clusterManager);\n            if (!cluster) {\n                return;\n            }\n            clientCodeInjector(cluster);\n        },\n    });\n    // Add a command to launch a new cluster.\n    app.commands.addCommand(CommandIDs.newCluster, {\n        label: (args) => (args[\"isPalette\"] ? \"Create New Cluster\" : \"NEW\"),\n        execute: () => sidebar.clusterManager.create(),\n        iconClass: (args) => args[\"isPalette\"] ? \"\" : \"jp-AddIcon jp-Icon jp-Icon-16\",\n        isEnabled: () => sidebar.clusterManager.isReady,\n        caption: () => {\n            if (sidebar.clusterManager.isReady) {\n                return \"Start New Cluster\";\n            }\n            return \"Cluster starting...\";\n        },\n    });\n    // Add a command to launch a new cluster.\n    app.commands.addCommand(CommandIDs.startCluster, {\n        label: \"Start Cluster\",\n        execute: () => {\n            const cluster = Private.clusterFromClick(app, sidebar.clusterManager);\n            if (!cluster) {\n                return;\n            }\n            return sidebar.clusterManager.start(cluster.id);\n        },\n    });\n    // Add a command to stop a cluster.\n    app.commands.addCommand(CommandIDs.stopCluster, {\n        label: \"Shutdown Cluster\",\n        execute: () => {\n            const cluster = Private.clusterFromClick(app, sidebar.clusterManager);\n            if (!cluster) {\n                return;\n            }\n            return sidebar.clusterManager.stop(cluster.id);\n        },\n    });\n    // Add a command to resize a cluster.\n    app.commands.addCommand(CommandIDs.scaleCluster, {\n        label: \"Scale Cluster…\",\n        execute: () => {\n            const cluster = Private.clusterFromClick(app, sidebar.clusterManager);\n            if (!cluster) {\n                return;\n            }\n            return sidebar.clusterManager.scale(cluster.id);\n        },\n    });\n    // Add a command to toggle the auto-starting client code.\n    // app.commands.addCommand(CommandIDs.toggleAutoStartClient, {\n    //   label: \"Auto-Start IPython Parallel\",\n    //   isToggled: () => autoStartClient,\n    //   execute: async () => {\n    //     const value = !autoStartClient;\n    //     const key = \"autoStartClient\";\n    //     return settingRegistry\n    //       .set(PLUGIN_ID, key, value)\n    //       .catch((reason: Error) => {\n    //         console.error(\n    //           `Failed to set ${PLUGIN_ID}:${key} - ${reason.message}`\n    //         );\n    //       });\n    //   },\n    // });\n    // // Add some commands to the menu and command palette.\n    // mainMenu.settingsMenu.addGroup([\n    //   { command: CommandIDs.toggleAutoStartClient },\n    // ]);\n    // [CommandIDs.newCluster, CommandIDs.toggleAutoStartClient].forEach(\n    //   (command) => {\n    //     commandPalette.addItem({\n    //       category: \"IPython Parallel\",\n    //       command,\n    //       args: { isPalette: true },\n    //     });\n    //   }\n    // );\n    // Add a context menu items.\n    app.contextMenu.addItem({\n        command: CommandIDs.injectClientCode,\n        selector: \".ipp-ClusterListingItem\",\n        rank: 10,\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.stopCluster,\n        selector: \".ipp-ClusterListingItem\",\n        rank: 3,\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.scaleCluster,\n        selector: \".ipp-ClusterListingItem\",\n        rank: 2,\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.startCluster,\n        selector: \".ipp-ClusterListing-list\",\n        rank: 1,\n    });\n}\nvar Private;\n(function (Private) {\n    /**\n     * A private counter for ids.\n     */\n    Private.id = 0;\n    /**\n     * Whether a kernel should be used. Only evaluates to true\n     * if it is valid and in python.\n     */\n    async function shouldUseKernel(kernel) {\n        if (!kernel) {\n            return false;\n        }\n        const spec = await kernel.spec;\n        return !!spec && spec.language.toLowerCase().indexOf(\"python\") !== -1;\n    }\n    Private.shouldUseKernel = shouldUseKernel;\n    /**\n     * Connect a kernel to a cluster by creating a new Client.\n     */\n    async function createClientForKernel(model, kernel) {\n        const code = getClientCode(model);\n        const content = {\n            store_history: false,\n            code,\n        };\n        return new Promise((resolve, _) => {\n            const future = kernel.requestExecute(content);\n            future.onIOPub = (msg) => {\n                if (msg.header.msg_type !== \"display_data\") {\n                    return;\n                }\n                resolve(void 0);\n            };\n        });\n    }\n    Private.createClientForKernel = createClientForKernel;\n    /**\n     * Insert code to connect to a given cluster.\n     */\n    function injectClientCode(cluster, editor) {\n        const cursor = editor.getCursorPosition();\n        const offset = editor.getOffsetAt(cursor);\n        const code = getClientCode(cluster);\n        editor.model.value.insert(offset, code);\n    }\n    Private.injectClientCode = injectClientCode;\n    /**\n     * Get code to connect to a given cluster.\n     */\n    function getClientCode(cluster) {\n        return `import ipyparallel as ipp\n\ncluster = ipp.Cluster.from_file(\"${cluster.cluster_file}\")\nrc = cluster.connect_client_sync()\nrc`;\n    }\n    Private.getClientCode = getClientCode;\n    /**\n     * Get the currently focused kernel in the application,\n     * checking both notebooks and consoles.\n     */\n    function getCurrentKernel(shell, notebookTracker, consoleTracker) {\n        var _a, _b, _c, _d;\n        // Get a handle on the most relevant kernel,\n        // whether it is attached to a notebook or a console.\n        let current = shell.currentWidget;\n        let kernel;\n        if (current && notebookTracker.has(current)) {\n            kernel = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        }\n        else if (current && consoleTracker.has(current)) {\n            kernel = (_b = current.sessionContext.session) === null || _b === void 0 ? void 0 : _b.kernel;\n        }\n        else if (notebookTracker.currentWidget) {\n            const current = notebookTracker.currentWidget;\n            kernel = (_c = current.sessionContext.session) === null || _c === void 0 ? void 0 : _c.kernel;\n        }\n        else if (consoleTracker.currentWidget) {\n            const current = consoleTracker.currentWidget;\n            kernel = (_d = current.sessionContext.session) === null || _d === void 0 ? void 0 : _d.kernel;\n        }\n        return kernel;\n    }\n    Private.getCurrentKernel = getCurrentKernel;\n    /**\n     * Get the currently focused editor in the application,\n     * checking both notebooks and consoles.\n     * In the case of a notebook, it creates a new cell above the currently\n     * active cell and then returns that.\n     */\n    function getCurrentEditor(app, notebookTracker, consoleTracker) {\n        // Get a handle on the most relevant kernel,\n        // whether it is attached to a notebook or a console.\n        let current = app.shell.currentWidget;\n        let editor;\n        if (current && notebookTracker.has(current)) {\n            NotebookActions.insertAbove(current.content);\n            const cell = current.content.activeCell;\n            editor = cell && cell.editor;\n        }\n        else if (current && consoleTracker.has(current)) {\n            const cell = current.console.promptCell;\n            editor = cell && cell.editor;\n        }\n        else if (notebookTracker.currentWidget) {\n            const current = notebookTracker.currentWidget;\n            NotebookActions.insertAbove(current.content);\n            const cell = current.content.activeCell;\n            editor = cell && cell.editor;\n        }\n        else if (consoleTracker.currentWidget) {\n            const current = consoleTracker.currentWidget;\n            const cell = current.console.promptCell;\n            editor = cell && cell.editor;\n        }\n        return editor;\n    }\n    Private.getCurrentEditor = getCurrentEditor;\n    /**\n     * Get a cluster model based on the application context menu click node.\n     */\n    function clusterFromClick(app, manager) {\n        const test = (node) => !!node.dataset.clusterId;\n        const node = app.contextMenuHitTest(test);\n        if (!node) {\n            return undefined;\n        }\n        const id = node.dataset.clusterId;\n        return manager.clusters.find((cluster) => cluster.id === id);\n    }\n    Private.clusterFromClick = clusterFromClick;\n})(Private || (Private = {}));\n","import { Widget, PanelLayout } from \"@lumino/widgets\";\nimport { ClusterManager } from \"./clusters\";\n/**\n * A widget for hosting IPP cluster widgets\n */\nexport class Sidebar extends Widget {\n    /**\n     * Create a new IPP sidebar.\n     */\n    constructor(options) {\n        super();\n        this.addClass(\"ipp-Sidebar\");\n        let layout = (this.layout = new PanelLayout());\n        const injectClientCodeForCluster = options.clientCodeInjector;\n        const getClientCodeForCluster = options.clientCodeGetter;\n        // Add the cluster manager component.\n        this._clusters = new ClusterManager({\n            registry: options.registry,\n            injectClientCodeForCluster,\n            getClientCodeForCluster,\n        });\n        layout.addWidget(this._clusters);\n    }\n    /**\n     * Get the cluster manager associated with the sidebar.\n     */\n    get clusterManager() {\n        return this._clusters;\n    }\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_GET_URL_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/getUrl.js\";\nimport ___CSS_LOADER_URL_IMPORT_0___ from \"./code-light.svg\";\nimport ___CSS_LOADER_URL_IMPORT_1___ from \"./code-dark.svg\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_1___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root {\\n  --ipp-launch-button-height: 24px;\\n}\\n\\n/**\\n * Rules related to the overall sidebar panel.\\n */\\n\\n.ipp-Sidebar {\\n  background: var(--jp-layout-color1);\\n  color: var(--jp-ui-font-color1);\\n  font-size: var(--jp-ui-font-size1);\\n  overflow: auto;\\n}\\n\\n/**\\n * Rules related to the cluster manager.\\n */\\n\\n.ipp-ClusterManager {\\n  border-top: 6px solid var(--jp-toolbar-border-color);\\n}\\n\\n.ipp-ClusterManager .jp-Toolbar {\\n  align-items: center;\\n}\\n\\n.ipp-ClusterManager .jp-Toolbar .ipp-ClusterManager-label {\\n  flex: 0 0 auto;\\n  font-weight: 600;\\n  text-transform: uppercase;\\n  letter-spacing: 1px;\\n  font-size: var(--jp-ui-font-size0);\\n  padding: 8px 8px 8px 12px;\\n  margin: 0px;\\n}\\n\\n.ipp-ClusterManager button.jp-Button > span {\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n}\\n\\n.ipp-ClusterListing ul.ipp-ClusterListing-list {\\n  list-style-type: none;\\n  padding: 0;\\n  margin: 0;\\n}\\n\\n.ipp-ClusterListingItem {\\n  display: inline-block;\\n  list-style-type: none;\\n  padding: 8px;\\n  width: 100%;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  cursor: grab;\\n}\\n\\n.ipp-ClusterListingItem-drag {\\n  opacity: 0.7;\\n  color: var(--jp-ui-font-color1);\\n  cursor: grabbing;\\n  max-width: 260px;\\n  transform: translateX(-50%) translateY(-50%);\\n}\\n\\n.ipp-ClusterListingItem-title {\\n  margin: 0px;\\n  font-size: var(--jp-ui-font-size2);\\n}\\n\\n.ipp-ClusterListingItem-link a {\\n  text-decoration: none;\\n  color: var(--jp-content-link-color);\\n}\\n\\n.ipp-ClusterListingItem-link a:hover {\\n  text-decoration: underline;\\n}\\n\\n.ipp-ClusterListingItem-link a:visited {\\n  color: var(--jp-content-link-color);\\n}\\n\\n.ipp-ClusterListingItem:hover {\\n  background: var(--jp-layout-color2);\\n}\\n\\n.ipp-ClusterListingItem.jp-mod-active {\\n  color: white;\\n  background: var(--jp-brand-color0);\\n}\\n\\n.ipp-ClusterListingItem.jp-mod-active a,\\n.ipp-ClusterListingItem.jp-mod-active a:visited {\\n  color: white;\\n}\\n\\n.ipp-ClusterListingItem button.jp-mod-styled {\\n  background-color: transparent;\\n}\\n\\n.ipp-ClusterListingItem button.jp-mod-styled:hover {\\n  background-color: var(--jp-layout-color3);\\n}\\n\\n.ipp-ClusterListingItem.jp-mod-active button.jp-mod-styled:hover {\\n  background-color: var(--jp-brand-color1);\\n}\\n\\n.ipp-ClusterListingItem-button-panel {\\n  display: flex;\\n  align-content: center;\\n}\\n\\nbutton.ipp-ClusterListingItem-stop {\\n  color: var(--jp-warn-color1);\\n  font-weight: 600;\\n}\\n\\nbutton.ipp-ClusterListingItem-scale {\\n  color: var(--jp-accent-color1);\\n  font-weight: 600;\\n}\\n\\nbutton.ipp-ClusterListingItem-start {\\n  color: var(--jp-accent-color1);\\n  font-weight: 600;\\n}\\n\\nbutton.ipp-hidden {\\n  display: none;\\n}\\n\\n.ipp-ClusterListingItem button.ipp-ClusterListingItem-code.jp-mod-styled {\\n  margin: 0 4px 0 4px;\\n  background-repeat: no-repeat;\\n  background-position: center;\\n}\\n\\n/**\\n * Rules for the scaling dialog.\\n */\\n\\n.ipp-DialogHeader {\\n  font-size: var(--jp-ui-font-size2);\\n}\\n\\n.ipp-DialogSection {\\n  margin-left: 24px;\\n}\\n\\n.ipp-DialogSection-item {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-around;\\n  margin: 12px 0 12px 0;\\n}\\n\\n.ipp-DialogHeader input[type=\\\"checkbox\\\"] {\\n  position: relative;\\n  top: 4px;\\n  left: 4px;\\n  margin: 0 0 0 8px;\\n}\\n\\n.ipp-DialogSection input[type=\\\"number\\\"] {\\n  width: 72px;\\n}\\n\\n.ipp-DialogSection-label.ipp-mod-disabled {\\n  color: var(--jp-ui-font-color3);\\n}\\n\\n.ipp-DialogSection input[type=\\\"number\\\"]:disabled {\\n  color: var(--jp-ui-font-color3);\\n}\\n\\n/**\\n * Rules for the logos.\\n */\\n\\n.ipp-SearchIcon {\\n  background-image: var(--jp-icon-search);\\n}\\n\\n[data-jp-theme-light=\\\"true\\\"] .ipp-CodeIcon {\\n  background-image: url(\" + ___CSS_LOADER_URL_REPLACEMENT_0___ + \");\\n}\\n\\n[data-jp-theme-light=\\\"false\\\"] .ipp-CodeIcon {\\n  background-image: url(\" + ___CSS_LOADER_URL_REPLACEMENT_1___ + \");\\n}\\n\\n.ipp-ClusterListingItem.jp-mod-active .ipp-CodeIcon {\\n  background-image: url(\" + ___CSS_LOADER_URL_REPLACEMENT_1___ + \");\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./lab/style/index.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,gCAAgC;AAClC;;AAEA;;EAEE;;AAEF;EACE,mCAAmC;EACnC,+BAA+B;EAC/B,kCAAkC;EAClC,cAAc;AAChB;;AAEA;;EAEE;;AAEF;EACE,oDAAoD;AACtD;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,gBAAgB;EAChB,yBAAyB;EACzB,mBAAmB;EACnB,kCAAkC;EAClC,yBAAyB;EACzB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,UAAU;EACV,SAAS;AACX;;AAEA;EACE,qBAAqB;EACrB,qBAAqB;EACrB,YAAY;EACZ,WAAW;EACX,mBAAmB;EACnB,gBAAgB;EAChB,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,+BAA+B;EAC/B,gBAAgB;EAChB,gBAAgB;EAChB,4CAA4C;AAC9C;;AAEA;EACE,WAAW;EACX,kCAAkC;AACpC;;AAEA;EACE,qBAAqB;EACrB,mCAAmC;AACrC;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,YAAY;EACZ,kCAAkC;AACpC;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,yCAAyC;AAC3C;;AAEA;EACE,wCAAwC;AAC1C;;AAEA;EACE,aAAa;EACb,qBAAqB;AACvB;;AAEA;EACE,4BAA4B;EAC5B,gBAAgB;AAClB;;AAEA;EACE,8BAA8B;EAC9B,gBAAgB;AAClB;;AAEA;EACE,8BAA8B;EAC9B,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,mBAAmB;EACnB,4BAA4B;EAC5B,2BAA2B;AAC7B;;AAEA;;EAEE;;AAEF;EACE,kCAAkC;AACpC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,6BAA6B;EAC7B,qBAAqB;AACvB;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,iBAAiB;AACnB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,+BAA+B;AACjC;;AAEA;EACE,+BAA+B;AACjC;;AAEA;;EAEE;;AAEF;EACE,uCAAuC;AACzC;;AAEA;EACE,yDAAqC;AACvC;;AAEA;EACE,yDAAoC;AACtC;;AAEA;EACE,yDAAoC;AACtC\",\"sourcesContent\":[\":root {\\n  --ipp-launch-button-height: 24px;\\n}\\n\\n/**\\n * Rules related to the overall sidebar panel.\\n */\\n\\n.ipp-Sidebar {\\n  background: var(--jp-layout-color1);\\n  color: var(--jp-ui-font-color1);\\n  font-size: var(--jp-ui-font-size1);\\n  overflow: auto;\\n}\\n\\n/**\\n * Rules related to the cluster manager.\\n */\\n\\n.ipp-ClusterManager {\\n  border-top: 6px solid var(--jp-toolbar-border-color);\\n}\\n\\n.ipp-ClusterManager .jp-Toolbar {\\n  align-items: center;\\n}\\n\\n.ipp-ClusterManager .jp-Toolbar .ipp-ClusterManager-label {\\n  flex: 0 0 auto;\\n  font-weight: 600;\\n  text-transform: uppercase;\\n  letter-spacing: 1px;\\n  font-size: var(--jp-ui-font-size0);\\n  padding: 8px 8px 8px 12px;\\n  margin: 0px;\\n}\\n\\n.ipp-ClusterManager button.jp-Button > span {\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n}\\n\\n.ipp-ClusterListing ul.ipp-ClusterListing-list {\\n  list-style-type: none;\\n  padding: 0;\\n  margin: 0;\\n}\\n\\n.ipp-ClusterListingItem {\\n  display: inline-block;\\n  list-style-type: none;\\n  padding: 8px;\\n  width: 100%;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  cursor: grab;\\n}\\n\\n.ipp-ClusterListingItem-drag {\\n  opacity: 0.7;\\n  color: var(--jp-ui-font-color1);\\n  cursor: grabbing;\\n  max-width: 260px;\\n  transform: translateX(-50%) translateY(-50%);\\n}\\n\\n.ipp-ClusterListingItem-title {\\n  margin: 0px;\\n  font-size: var(--jp-ui-font-size2);\\n}\\n\\n.ipp-ClusterListingItem-link a {\\n  text-decoration: none;\\n  color: var(--jp-content-link-color);\\n}\\n\\n.ipp-ClusterListingItem-link a:hover {\\n  text-decoration: underline;\\n}\\n\\n.ipp-ClusterListingItem-link a:visited {\\n  color: var(--jp-content-link-color);\\n}\\n\\n.ipp-ClusterListingItem:hover {\\n  background: var(--jp-layout-color2);\\n}\\n\\n.ipp-ClusterListingItem.jp-mod-active {\\n  color: white;\\n  background: var(--jp-brand-color0);\\n}\\n\\n.ipp-ClusterListingItem.jp-mod-active a,\\n.ipp-ClusterListingItem.jp-mod-active a:visited {\\n  color: white;\\n}\\n\\n.ipp-ClusterListingItem button.jp-mod-styled {\\n  background-color: transparent;\\n}\\n\\n.ipp-ClusterListingItem button.jp-mod-styled:hover {\\n  background-color: var(--jp-layout-color3);\\n}\\n\\n.ipp-ClusterListingItem.jp-mod-active button.jp-mod-styled:hover {\\n  background-color: var(--jp-brand-color1);\\n}\\n\\n.ipp-ClusterListingItem-button-panel {\\n  display: flex;\\n  align-content: center;\\n}\\n\\nbutton.ipp-ClusterListingItem-stop {\\n  color: var(--jp-warn-color1);\\n  font-weight: 600;\\n}\\n\\nbutton.ipp-ClusterListingItem-scale {\\n  color: var(--jp-accent-color1);\\n  font-weight: 600;\\n}\\n\\nbutton.ipp-ClusterListingItem-start {\\n  color: var(--jp-accent-color1);\\n  font-weight: 600;\\n}\\n\\nbutton.ipp-hidden {\\n  display: none;\\n}\\n\\n.ipp-ClusterListingItem button.ipp-ClusterListingItem-code.jp-mod-styled {\\n  margin: 0 4px 0 4px;\\n  background-repeat: no-repeat;\\n  background-position: center;\\n}\\n\\n/**\\n * Rules for the scaling dialog.\\n */\\n\\n.ipp-DialogHeader {\\n  font-size: var(--jp-ui-font-size2);\\n}\\n\\n.ipp-DialogSection {\\n  margin-left: 24px;\\n}\\n\\n.ipp-DialogSection-item {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-around;\\n  margin: 12px 0 12px 0;\\n}\\n\\n.ipp-DialogHeader input[type=\\\"checkbox\\\"] {\\n  position: relative;\\n  top: 4px;\\n  left: 4px;\\n  margin: 0 0 0 8px;\\n}\\n\\n.ipp-DialogSection input[type=\\\"number\\\"] {\\n  width: 72px;\\n}\\n\\n.ipp-DialogSection-label.ipp-mod-disabled {\\n  color: var(--jp-ui-font-color3);\\n}\\n\\n.ipp-DialogSection input[type=\\\"number\\\"]:disabled {\\n  color: var(--jp-ui-font-color3);\\n}\\n\\n/**\\n * Rules for the logos.\\n */\\n\\n.ipp-SearchIcon {\\n  background-image: var(--jp-icon-search);\\n}\\n\\n[data-jp-theme-light=\\\"true\\\"] .ipp-CodeIcon {\\n  background-image: url(code-light.svg);\\n}\\n\\n[data-jp-theme-light=\\\"false\\\"] .ipp-CodeIcon {\\n  background-image: url(code-dark.svg);\\n}\\n\\n.ipp-ClusterListingItem.jp-mod-active .ipp-CodeIcon {\\n  background-image: url(code-dark.svg);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","export default \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\\n<svg\\n   xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n   version=\\\"1.1\\\"\\n   viewBox=\\\"0 0 20 20\\\"\\n   height=\\\"20\\\"\\n   width=\\\"20\\\">\\n   <!-- text: IP in Source Code Pro -->\\n    <g\\n       aria-label=\\\"IP\\\">\\n      <path\\n         class=\\\"jp-icon3 jp-icon-selectable\\\"\\n         fill=\\\"#616161\\\"\\n         d=\\\"m 1.619125,15.248 v -1.136 h 2.608 V 5.8720001 h -2.608 v -1.12 h 6.56 v 1.12 h -2.608 V 14.112 h 2.608 v 1.136 z\\\" />\\n      <path\\n         class=\\\"jp-icon3 jp-icon-selectable\\\"\\n         fill=\\\"#616161\\\"\\n         d=\\\"M 11.324875,15.248 V 4.7520001 h 3.168 q 1.168,0 2.032,0.288 0.88,0.288 1.36,0.976 0.496,0.672 0.496,1.824 0,1.104 -0.496,1.824 -0.48,0.7199999 -1.36,1.0719999 -0.88,0.352 -2.032,0.352 h -1.84 v 4.16 z m 1.328,-5.248 h 1.68 q 1.376,0 2.032,-0.5119999 0.672,-0.528 0.672,-1.648 0,-1.136 -0.672,-1.568 -0.672,-0.448 -2.032,-0.448 h -1.68 z\\\" />\\n  </g>\\n</svg>\\n\";","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","module.exports = \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23E0E0E0' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='none' d='M0 0h24v24H0V0z'/%3E%3Cpath d='M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z'/%3E%3C/svg%3E\"","module.exports = \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23616161' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='none' d='M0 0h24v24H0V0z'/%3E%3Cpath d='M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z'/%3E%3C/svg%3E\""],"names":[],"sourceRoot":""}